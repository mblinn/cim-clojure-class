cmdhistory=[";; Switching to cim-clojure-class.1-homework namespace" "(a-list 0)" "(read-string \\"[\:foo \:bar \:baz]\\")" "(\= _ (eval (read-string \\"(+ 1 1)\\")))" "(\= _ (read-string \\"(+ 1 1)\\"))" "(\= [1 2 3] a-vector)" "(\= 2 (eval (read-string \\"(+ 1 1)\\")))" "(clojure.core/ns cim-clojure-class.1-the-beginning)\\n(defn hello-world [] \\n  (println \\"hello, world\\"))\\n(clojure.core/ns cim-clojure-class.1-homework)" "(hello-world)" ";; Switching to cim-clojure-class.1-the-beginning namespace" "(hello-world)" "*ns*" "(hello-world)" "(in-ns 'cim-clojure-class.1-the-beginning)" "(hello, world)" "(hello-world)" "(+ 1 1)" "(* 2 2)" "42" "42.42" "\\"hi\\"" "\\\\a" "(type \\"foo\\")" "(type 42)" "(type 4.4)" "42/43" "(type 42/43)" "hello-world" "(hello-world)" "\:foo" "{\:foo \\"a foo\\", 42 \\"a fourty two\\"}" "{\:foo \\"a foo\\" 42 \\"a fourty two\\"}" "{\:foo \\"a foo\\",,,,,,,,,,,,,,,,,,,,, 42 \\"a fourty two\\"}" "{\:foo}" "{}" "[1 2 3 \\"orange\\"]" "\#{\\"dingo\\" \\"baby\\" \:tree 42}" "\#{42 42}" "(conj \#{\:foo} \:foo)" "(map \:foo \:bar)" "(type {})" "a-map" "something" "a-map" "(a-map \:foo)" "(\:foo a-map)" "(\:quzz a-map)" "(get a-map \:quzz \\"the default\\")" "(\:foo a-set)" "(assoc a-map \:quz \\"quz\\")" "a-map" "(def a-map-2 (assoc a-map \:quz \\"quz\\"))" "a-map-2" "a-map" "(a-vector 0)" "(contains? a-vector 0)" "(a-vector 0)" "(conj a-vector 4)" "a-vector" "(a-set \:foo)" "(\:foo a-set)" "(\:quzz a-set)" "{\:foo nil}" "{nil \\"bar\\"}" "\#{nil \:foo}" "(conj a-set \:quzz)" "(conj a-set \:foo)" "\#{\:foo \:foo}" "(conj a-set \:quz \:quzz \:foo)" "(conj a-vector 99)" "(conj a-map [\:bazz \\"bazz\\"])" " (conj a-map [\:bazz \\"bazz\\"] [\:foooo \\"loooong foooo\\"])" "(str \\"foo \\" \\"bar \\" \\"baz \\")" "(a-function \\"billy\\" \\"jean\\")" "(side-effectful \\"billy jean\\")" "(defn side-effectful [an-argument]\\n  \\"A simple function with a let statement and side effect.\\"\\n  (let [a-string (str \\"an-argument \\" an-argument)]\\n    (println a-string) ;<--- this is a side effect\\n    a-string))" "(side-effectfull \\"billy jean\\")" "(side-effectful \\"billy jean\\")" "(if true \\"this was true\\" \\"this was false\\")" "(def the-if-val (if true \\"this was true\\" \\"this was false\\"))" "(if nil \\"this was true\\" \\"this was false\\")" "(if false \\"this was true\\" \\"this was false\\")" "(if 0 \\"this was true\\" \\"this was false\\")" "(even? 2)" "(even? 3)" "(/ 42 2)" "(half-if-even 42)" "(half-if-even 41)" "(let [foo \\"foo\\"]\\n  (str \\"a foo\! a foo\! \\" foo))" "defprotocol" "foo" "(let [foo \\"foo\\" bar \\"bar\\"])" "(let [foo \\"foo\\" bar \\"bar\\"] foo)" "(get-job-type \\"Mbl\\")" "(get-job-type \\"MBL\\")" "(get-job-type \\"Mishu\\")" "(\= \\"foo\\" \\"foo\\")" "read-vec" "(read-vec 0)" "read-map" "{\:foo \\"bar\\"}" "\:foo" "42" "\\"some jawn\\"" "(def a-var \\"this is the value\\")" "(quote (+ 1 1))" "(+ 1 1)" "(quote (+ 1 1))" "(def a-var \\"this is a value\\")" "(\\"hello\\", \\"world\\")" "'(+ 1 1)" "(+ 1 (+ 1 1))" "(+ 1 1 1 1 1)" "(1 1)" "(first '(+ 1 1))" "(rest '(+ 1 1))" "(print \\"hello\\")" "(println \\"hellp\\")" "read-vec" ";; Switching to cim-clojure-class.2-state namespace" "@an-atom" "(java.lang.Thread/currentThread)" "(pcalls (fn [] (Thread/currentThread)) 5)" "(pcalls 5 (fn [] (Thread/currentThread)))" "(def f (fn [] (java.lang.Thread/currentThread)))" "(apply pcalls [fn fn fn])" "(apply pcalls fn fn fn)" "(apply pcalls [f f f])" "(repeat 5 'foo)" "@an-int-atom" "(add-to-an-int-atom 1)" "@an-int-atom" "(add-to-an-int-atom 99)" "@an-int-agent" "(add-to-an-int-agent 42)" "@an-int-agent" "(conj [] \:foo \:bar)" "(add-to-refs \:foo \\"foo\\")" "(def map-ref (ref {}))" "(def vec-ref (ref []))" "(defn add-to-refs [a b]\\n  (dosync\\n    (alter map-ref assoc a b)\\n    (alter vec ref conj a b)))" "@map-ref" "@vec-ref" "(add-to-refs \:foo \\"foo\\")" "(defn add-to-refs [a b]\\n  (dosync\\n    (alter map-ref assoc a b)\\n    (alter vec-ref ref conj a b)))" "(add-to-refs \:foo \\"foo\\")" "(assoc {} \:foo \\"foo\\")" "@map-ref" "@vec-ref" "(apply conj [] \:foo \\"foo\\")" "(apply assoc [] \:foo \\"foo\\")" "(apply assoc {} \:foo \\"foo\\")" "(defn add-to-refs [value]\\n  (dosync\\n    (alter vec-one value)\\n    (alter vec-two value)))" "(def vec-one (ref []))" "(def vec-two (ref []))" "(add-to-refs [\:foo])" "(defn add-to-refs [value]\\n  (dosync\\n    (alter vec-one value)\\n    (alter vec-two value)))" "(add-to-refs \:foo)" "@vec-one" "(defn add-to-refs [value]\\n  (dosync\\n    (alter vec-one assoc value)\\n    (alter vec-two assoc value)))" "(add-to-refs \:foo)" "(def vec-count (ref 0))" "(def vec-two (ref []))" "(defn add-to-refs [value]\\n  (dosync\\n    (alter vec-count inc value)\\n    (alter vec-two conj value)))" "(add-to-refs 42)" "(defn add-to-refs [value]\\n  (dosync\\n    (alter vec-count + value)\\n    (alter vec-two conj value)))" "(add-to-refs 42)" "@vec-count" "@vec-two"]
eclipse.preferences.version=1
